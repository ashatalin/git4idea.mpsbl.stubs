package git4idea.mpsbl.stubs.usage.actions.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.apache.log4j.Level;
import org.jetbrains.git4idea.ssh.SSHConfig;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class TestAction_Action extends BaseAction {
  private static final Icon ICON = null;
  public TestAction_Action() {
    super("Test Action", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "TestAction", t);
      }
      this.disable(event.getPresentation());
    }
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      SSHConfig instanceFromPlugin = new SSHConfig();
      if (LOG.isInfoEnabled()) {
        LOG.info("Executed: " + instanceFromPlugin.toString());
      }
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "TestAction", t);
      }
    }
  }
  protected static Logger LOG = LogManager.getLogger(TestAction_Action.class);
}
